filter(flights, dest = c("IAH" | "HOU")
flights %>%
filter(arr_delay > 120)
filter(flights, dest = c("IAH" | "HOU")
filter(flights, dest = c("IAH" | "HOU"))
filter(flights, dest = c("IAH", "HOU"))
filter(flights, dest == c("IAH", "HOU"))
filter(flights, dest == c("IAH" | "HOU"))
filter(flights, dest == ("IAH" | "HOU")
filter(flights, dest == ("IAH" | "HOU"))
filter(flights, dest == (IAH | HOU))
filter(flights, dest == "IAH" | dest == "HOU"))
filter(flights, dest == "IAH" | dest == "HOU")
filter(flights, dest %in% c(IAH, HOU))
filter(flights, dest %in% c("IAH", "HOU"))
filter(flights, carrier == c("UA", "AA", "DL")
filter(flights, carrier == c("UA", "AA", "DL"))
filter(flights, carrier == c("UA", "AA", "DL"))
filter(flights, dest == c("IAH", "HOU"))
filter(flights, carrier == c("UA", "AA", "DL"))
filter(flights, carrier == c("UA", "AA"))
filter(flights, carrier == c("UA", "AA", "DL"))
filter(flights, carrier %in% c("UA", "AA", "DL"))
filter(flights, arr_delay >= 120, dep_delay <=0)
filter(flights, month == c("7", "8", "9"))
filter(flights, month == c("7", "8"))
filter(flights, month %in% c("7", "8", "9"))
filter(flights, arr_delay >= 60, (arr_delay - dep_delay) >=0)
filter(flights, dep_time <=600)
filter(flights, between( 300, 600)
filter(flights, between( 300, 600))
filter(flights, between( 300 && 600))
filter(flights, between(300, 600))
filter(flights, between(300 && 600))
?between
is.na(dep_time)
filter(flights, between(dep_time, 300, 600))
filter(flights, is.na(dep_time))
NA^0
NA | TRUE
NA*0
arrange(flights, year, month, day)
arrange(flights, desc(arr_delay))
df <- tibble(x = c(5, 2, NA))
arrange(df, x)
arrange(df, desc(x))
arrange(flights, is.na())
arrange(flights, is.na(dep_time))
arrange(flights, desc(is.na(dep_time)))
arrange(flights, dep_late)
arrange(flights, dep_delay)
arrange(flights, desc(dep_delay))
arrange(flights, desc(dep_time))
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day))
rename(flights, tail_num = tailnum)
select(flights, time_hour, air_time, everything())
select(flights, time_hour, flights, air_time, everything())
select(flights, air_time time_hour, air_time, everything())
select(flights, air_time, time_hour, air_time, everything())
?one_of
select(flights, starts_with("dep_"), starts_with("arr_"))
select(flights, contains("TIME"))
View(nov_dec)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
Note that you can refer to columns that youâ€™ve just created:
mutate(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
transmute(flights,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
transmute(flights, gain = arr_delay - dep_delay, hours = air_time / 60,
gain_per_hour = gain / hours )
transmute(flights, gain = arr_delay - dep_delay, hours = air_time / 60,
gain_per_hour = gain / hours)
transmute(flights, dep_time, hour = dep_time %/% 100, minute = dep_time %% 100)
rm(list = ls())
#Neuromyths analyses
#Load packages
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
library(knitr)
library(kableExtra)
library(broom)
library(reshape)
neuromyths <- read_excel("Neuromyths Full 170815.xlsx")
#Create columns for weighted responses, by item and overall
neuromyths <- mutate(neuromyths, percentW = dichotomized750weights * percentyn,
phoneW = dichotomized750weights *  phoneyn, vaccinesW = dichotomized750weights *	vaccinesyn,
practiceW =  dichotomized750weights *practiceyn, staringW =  dichotomized750weights *	staringyn,
mozartW =  dichotomized750weights *	mozartyn, hemiW =  dichotomized750weights *	hemiyn,
instinctsW =  dichotomized750weights * instinctsyn, subliminalW =  dichotomized750weights *	subliminalyn,
totalneuroW =  dichotomized750weights * totalneuroyn)
#Create long format dataframe for easier figure-making
neuromythsLong <- gather(neuromyths, 'percentW', 'phoneW','vaccinesW','practiceW','staringW',
'mozartW','hemiW','instinctsW','subliminalW', key = "Myth", value = "Agreement")
# Graph means for each condition (with SE bars)
#stat=identity means use exactly what DV says; the default for geom_bar is counts or something.
ggplot(neuromythsLong, aes(x=Myth, y=Agreement/750)) + geom_bar(stat="identity") + facet_grid(. ~ method)
rm(list = ls())
library(tidyverse)
abE6 <- read_csv("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/E4/abE6.csv")
abE6 <- abE6[-(1:2),]
---
title: "AB Illusion Experiment 3 Markdown"
author: "Geoff Holtzman"
date: "8/7/2017"
output:
html_document: default
pdf_document: default
word_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
The following substitutions have been made to the generic code
1. Exeriment: abE6
2. Vignette: AVs
3. AB Short: AccBrakeShort
4. AB Long: AccBrakeLong
5. A Condition: Accelerate
6. B Condition: Brake
#Basic figures and tables
```{r echo=FALSE, include=FALSE}
#A/B Illusion Experiment abE6: AVs
rm(list = ls())
setwd("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6")
#Load packages
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
library(knitr)
library(kableExtra)
library(broom)
abE6 <- read.csv("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6/abE6.csv")
abE6[is.na(abE6)] <- 0
#Histogram ratings for each condition
```{r echo=FALSE}
ggplot(abE6) +
geom_bar(mapping = aes(x = dv, y = ..prop..), fill = 'light blue', color = 'black', width = .75) +
facet_wrap(~ condLabel) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,.6)) +
ylab('Proportion of participants choosing each sacle point') +
xlab('Appropriateness')
```
#Summary statistics
```{r echo=FALSE}
abE6summary <- summarySE(abE6, measurevar="dv", groupvars="condLabel")
kable(abE6summary, digits = 2)
```
#Means and SDs for each condition
```{r echo=FALSE}
ggplot(abE6summary, aes(x=condLabel, y=dv)) +
geom_bar(stat="identity", fill = 'light blue', color = 'black', width = .5) +
geom_errorbar(aes(ymin=dv-se, ymax=dv+se), width = .1) +
ylab('Mean Rated Appropriateness') +
xlab('Condition') +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,5))
```
#T-tests for within-type differences and focal analyses
```{r echo=FALSE}
AvB <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'Brake')$dv, var.equal = TRUE)))
ABLvABS <- tidy((t.test(filter(abE6, condLabel == 'AccBrakeShort')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
AvABS <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'AccBrakeShort')$dv, var.equal = TRUE)))
AvABL <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
BvABS <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'AccBrakeShort')$dv, var.equal = TRUE)))
BvABL <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
abE6ttests <- t(do.call(rbind, Map(data.frame, AccelerateVsBrake=BvP, AccBrakeLongVsAccBrakeShort=ABLvABS, AccelerateVsAccBrakeShort=AvABS, AccelerateVsAccBrakeLong=AvABL, BrakeVsAccBrakeShort=BvABS, BrakeVsAccBrakeLong=BvABL)))
abE6ttests <- abE6ttests[ , c(1:5) ]
#Rename column names
colnames(abE6ttests) <- c("Mean1", "Mean2", "t statistic", "p-value", "df")
#Print table
kable(abE6ttests, digits = 2)
```
AvB <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'Brake')$dv, var.equal = TRUE)))
ABLvABS <- tidy((t.test(filter(abE6, condLabel == 'AccBrakeShort')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
ABLvABS <- tidy((t.test(filter(abE6, condLabel == 'AccBrakeShort')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
AvABS <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'AccBrakeShort')$dv, var.equal = TRUE)))
---
title: "AB Illusion Experiment 3 Markdown"
author: "Geoff Holtzman"
date: "8/7/2017"
output:
html_document: default
pdf_document: default
word_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
The following substitutions have been made to the generic code
1. Exeriment: abE6
2. Vignette: AVs
3. AB Short: AccBrakeShort
4. AB Long: AccBrakeLong
5. A Condition: Accelerate
6. B Condition: Brake
#Basic figures and tables
```{r echo=FALSE, include=FALSE}
#A/B Illusion Experiment abE6: AVs
rm(list = ls())
setwd("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6")
#Load packages
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
library(knitr)
library(kableExtra)
library(broom)
abE6 <- read.csv("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6/abE6.csv")
abE6[is.na(abE6)] <- 0
#Histogram ratings for each condition
```{r echo=FALSE}
ggplot(abE6) +
geom_bar(mapping = aes(x = dv, y = ..prop..), fill = 'light blue', color = 'black', width = .75) +
facet_wrap(~ condLabel) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,.6)) +
ylab('Proportion of participants choosing each sacle point') +
xlab('Appropriateness')
```
#Summary statistics
```{r echo=FALSE}
abE6summary <- summarySE(abE6, measurevar="dv", groupvars="condLabel")
kable(abE6summary, digits = 2)
```
#Means and SDs for each condition
```{r echo=FALSE}
ggplot(abE6summary, aes(x=condLabel, y=dv)) +
geom_bar(stat="identity", fill = 'light blue', color = 'black', width = .5) +
geom_errorbar(aes(ymin=dv-se, ymax=dv+se), width = .1) +
ylab('Mean Rated Appropriateness') +
xlab('Condition') +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,5))
```
---
title: "AB Illusion Experiment 3 Markdown"
author: "Geoff Holtzman"
date: "8/7/2017"
output:
html_document: default
pdf_document: default
word_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
The following substitutions have been made to the generic code
1. Exeriment: abE6
2. Vignette: AVs
3. AB Short: AccBrakeShort
4. AB Long: AccBrakeLong
5. A Condition: Accelerate
6. B Condition: Brake
#Basic figures and tables
```{r echo=FALSE, include=FALSE}
#A/B Illusion Experiment abE6: AVs
rm(list = ls())
setwd("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6")
#Load packages
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
library(knitr)
library(kableExtra)
library(broom)
abE6 <- read.csv("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6/abE6.csv")
abE6[is.na(abE6)] <- 0
#Histogram ratings for each condition
```{r echo=FALSE}
ggplot(abE6) +
geom_bar(mapping = aes(x = dv, y = ..prop..), fill = 'light blue', color = 'black', width = .75) +
facet_wrap(~ condLabel) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,.6)) +
ylab('Proportion of participants choosing each sacle point') +
xlab('Appropriateness')
```
#Summary statistics
```{r echo=FALSE}
abE6summary <- summarySE(abE6, measurevar="dv", groupvars="condLabel")
kable(abE6summary, digits = 2)
```
#Means and SDs for each condition
```{r echo=FALSE}
ggplot(abE6summary, aes(x=condLabel, y=dv)) +
geom_bar(stat="identity", fill = 'light blue', color = 'black', width = .5) +
geom_errorbar(aes(ymin=dv-se, ymax=dv+se), width = .1) +
ylab('Mean Rated Appropriateness') +
xlab('Condition') +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,5))
```
AvB <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'Brake')$dv, var.equal = TRUE)))
ABLvABS <- tidy((t.test(filter(abE6, condLabel == 'AccBrakeShort')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
AvABS <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'AccBrakeShort')$dv, var.equal = TRUE)))
AvABL <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
BvABS <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'AccBrakeShort')$dv, var.equal = TRUE)))
BvABL <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
AvB <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'Brake')$dv, var.equal = TRUE)))
ABLvABS <- tidy((t.test(filter(abE6, condLabel == 'AccBrakeShort')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
AvABS <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'AccBrakeShort')$dv, var.equal = TRUE)))
AvABL <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
BvABS <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'AccBrakeShort')$dv, var.equal = TRUE)))
BvABL <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'AccBrakeLong')$dv, var.equal = TRUE)))
AvB <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'Brake')$dv, var.equal = TRUE)))
rm(list = ls())
---
title: "AB Illusion Experiment 3 Markdown"
author: "Geoff Holtzman"
date: "8/7/2017"
output:
html_document: default
pdf_document: default
word_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
The following substitutions have been made to the generic code
1. Exeriment: abE6
2. Vignette: AVs
3. AB Short: ABshort
4. AB Long: ABlong
5. A Condition: Accelerate
6. B Condition: Brake
#Basic figures and tables
```{r echo=FALSE, include=FALSE}
#A/B Illusion Experiment abE6: AVs
rm(list = ls())
setwd("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6")
#Load packages
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
library(knitr)
library(kableExtra)
library(broom)
abE6 <- read.csv("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6/abE6.csv")
abE6[is.na(abE6)] <- 0
#Histogram ratings for each condition
```{r echo=FALSE}
ggplot(abE6) +
geom_bar(mapping = aes(x = dv, y = ..prop..), fill = 'light blue', color = 'black', width = .75) +
facet_wrap(~ condLabel) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,.6)) +
ylab('Proportion of participants choosing each sacle point') +
xlab('Appropriateness')
```
#Summary statistics
```{r echo=FALSE}
abE6summary <- summarySE(abE6, measurevar="dv", groupvars="condLabel")
kable(abE6summary, digits = 2)
```
#Means and SDs for each condition
```{r echo=FALSE}
ggplot(abE6summary, aes(x=condLabel, y=dv)) +
geom_bar(stat="identity", fill = 'light blue', color = 'black', width = .5) +
geom_errorbar(aes(ymin=dv-se, ymax=dv+se), width = .1) +
ylab('Mean Rated Appropriateness') +
xlab('Condition') +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,5))
```
#T-tests for within-type differences and focal analyses
```{r echo=FALSE}
AvB <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'Brake')$dv, var.equal = TRUE)))
ABLvABS <- tidy((t.test(filter(abE6, condLabel == 'ABshort')$dv,filter(abE6, condLabel == 'ABlong')$dv, var.equal = TRUE)))
AvABS <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'ABshort')$dv, var.equal = TRUE)))
AvABL <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'ABlong')$dv, var.equal = TRUE)))
BvABS <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'ABshort')$dv, var.equal = TRUE)))
BvABL <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'ABlong')$dv, var.equal = TRUE)))
abE6ttests <- t(do.call(rbind, Map(data.frame, AccelerateVsBrake=BvP, ABlongVsABshort=ABLvABS, AccelerateVsABshort=AvABS, AccelerateVsABlong=AvABL, BrakeVsABshort=BvABS, BrakeVsABlong=BvABL)))
abE6ttests <- abE6ttests[ , c(1:5) ]
#Rename column names
colnames(abE6ttests) <- c("Mean1", "Mean2", "t statistic", "p-value", "df")
#Print table
kable(abE6ttests, digits = 2)
```
View(abE6)
View(abE6)
---
title: "AB Illusion Experiment 3 Markdown"
author: "Geoff Holtzman"
date: "8/7/2017"
output:
html_document: default
pdf_document: default
word_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
The following substitutions have been made to the generic code
1. Exeriment: abE6
2. Vignette: AVs
3. AB Short: ABshort
4. AB Long: ABlong
5. A Condition: Accelerate
6. B Condition: Brake
#Basic figures and tables
```{r echo=FALSE, include=FALSE}
#A/B Illusion Experiment abE6: AVs
rm(list = ls())
setwd("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6")
#Load packages
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
library(knitr)
library(kableExtra)
library(broom)
abE6 <- read.csv("/Users/gsholtzman/Google Drive/Geisinger 2017/AB illusion/abE6/abE6.csv")
abE6[is.na(abE6)] <- 0
#Histogram ratings for each condition
```{r echo=FALSE}
ggplot(abE6) +
geom_bar(mapping = aes(x = dv, y = ..prop..), fill = 'light blue', color = 'black', width = .75) +
facet_wrap(~ condLabel) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,.6)) +
ylab('Proportion of participants choosing each sacle point') +
xlab('Appropriateness')
```
#Summary statistics
```{r echo=FALSE}
abE6summary <- summarySE(abE6, measurevar="dv", groupvars="condLabel")
kable(abE6summary, digits = 2)
```
#Means and SDs for each condition
```{r echo=FALSE}
ggplot(abE6summary, aes(x=condLabel, y=dv)) +
geom_bar(stat="identity", fill = 'light blue', color = 'black', width = .5) +
geom_errorbar(aes(ymin=dv-se, ymax=dv+se), width = .1) +
ylab('Mean Rated Appropriateness') +
xlab('Condition') +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,5))
```
knitr::opts_chunk$set(echo = TRUE)
AvB <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'Brake')$dv, var.equal = TRUE)))
ABLvABS <- tidy((t.test(filter(abE6, condLabel == 'ABshort')$dv,filter(abE6, condLabel == 'ABlong')$dv, var.equal = TRUE)))
AvABS <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'ABshort')$dv, var.equal = TRUE)))
AvABL <- tidy((t.test(filter(abE6, condLabel == 'Accelerate')$dv,filter(abE6, condLabel == 'ABlong')$dv, var.equal = TRUE)))
BvABS <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'ABshort')$dv, var.equal = TRUE)))
BvABL <- tidy((t.test(filter(abE6, condLabel == 'Brake')$dv,filter(abE6, condLabel == 'ABlong')$dv, var.equal = TRUE)))
abE6ttests <- t(do.call(rbind, Map(data.frame, AccelerateVsBrake=BvP, ABlongVsABshort=ABLvABS, AccelerateVsABshort=AvABS, AccelerateVsABlong=AvABL, BrakeVsABshort=BvABS, BrakeVsABlong=BvABL)))
abE6ttests <- t(do.call(rbind, Map(data.frame, AccelerateVsBrake=AvB, ABlongVsABshort=ABLvABS, AccelerateVsABshort=AvABS, AccelerateVsABlong=AvABL, BrakeVsABshort=BvABS, BrakeVsABlong=BvABL)))
abE6ttests <- abE6ttests[ , c(1:5) ]
colnames(abE6ttests) <- c("Mean1", "Mean2", "t statistic", "p-value", "df")
kable(abE6ttests, digits = 2)
rm(list = ls())
