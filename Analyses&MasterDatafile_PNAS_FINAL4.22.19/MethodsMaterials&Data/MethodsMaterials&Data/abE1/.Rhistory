#AB Illusion Pilot 1 (checklist) analysis plan
rm(list = ls()) #clear all from environment
# setwd("/Users/Pheck/Dropbox/Geisinger/AB_Illusion/Pilot1/RCode/") #Macbook
setwd("/Users/pheck1/Dropbox/Geisinger/AB_Illusion/Pilot1/RCode/") #Desktop
#packages installed
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
df = read_excel("AB_Pilot1_Master_Exclusions.xlsx", sheet = "CleanedData_Exclusions")
df$condition <- factor(df$condition, levels = c("badge", "poster", "bp_short", "bp_long")) #order conditions to be: A, B, AB_short, AB_long
##STEP 1 - CRITICAL ANALYSES
## Visualize distributions of appropriateness for all four conditions
## Visualize distributions of appropriateness for all four conditions
ggplot(data <- df) +
geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
facet_wrap(~ condition) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,.7)) +
ylab('Proportion') +
xlab('Appropriateness') +
ggtitle('Pilot Experiment')
## Get a bar graph of all four condition means (with standard error).
df_means <- summarySE(df, measurevar="response", groupvars="condition")
ggplot(df_means, aes(x=condition, y=response)) +
geom_bar(position=position_dodge(), stat="identity", fill = 'purple') +
geom_errorbar(aes(ymin=response-se, ymax=response+se), width = .2) +
ylab('Appropriateness') +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,5)) +
ggtitle('Pilot Experiment')
## Test for differences between A and B (POSTER MORE APPROPRIATE THAN BADGE)
aApprop = filter(df, condition == 'badge')$response #pull out responses for only badge
bApprop = filter(df, condition == 'poster')$response #pull out responses for only poster
# badgers = df[df$condition == 'badge', ] #alternative way to filter out only those in badge condition #learningR
(t.test(aApprop,bApprop, var.equal = TRUE)) #posters are more appropriate
## Test for differences between AB_long and AB_short (NO DIFFERENCE)
abLong_Approp = filter(df, condition == 'bp_long')$response #pull out responses for only badge
abShort_Approp = filter(df, condition == 'bp_short')$response #pull out responses for only poster
(t.test(abLong_Approp,abShort_Approp,var.equal = TRUE)) #no differences between conditions
## Test for differences between A and AB long/short; B and AB long/short
(t.test(aApprop,abLong_Approp,var.equal = TRUE)) #BADGE MORE APPROP THAN AB_LONG
(t.test(aApprop,abShort_Approp,var.equal = TRUE)) #BADGE MORE APPROP THAN AB_SHORT
(t.test(bApprop,abLong_Approp,var.equal = TRUE)) #POSTER MORE APPROP THAN AB_LONG
(t.test(bApprop,abShort_Approp,var.equal = TRUE)) #POSTER MORE APPROP THAN AB_SHORT
## Collapse AB_Short and AB_Long into abApprop (no difference between them)
abApprop = filter(df, condition == 'bp_short' | condition == 'bp_long')$response
## Test A against abApprop and B against abApprop for estimates of A/B Illusion effect size
(t.test(aApprop,abApprop,var.equal = TRUE)) #BADGE MORE APPROP THAN A/B
cohen.d(aApprop,abApprop) #Cohen's d = .937
(t.test(bApprop,abApprop,var.equal = TRUE)) #POSTER MORE APPROP THAN A/B
cohen.d(bApprop,abApprop) #Cohen's d = 1.32
##STEP 2 - PSYCHOLOGICAL VARIABLES
#Vectorize the three items to scatter against each other
godBeliefs = df['god'] #God has an impact
intuitionBeliefs = df['believe'] #Too much science, not enough intuition
scienceBeliefs = df['science'] #Knowledge comes from science
scaleItems = cbind(godBeliefs, intuitionBeliefs, scienceBeliefs)
g1 = ggplot(data = df) +
geom_jitter(mapping = aes(x = df['god'], y = df['believe']))
g2 = ggplot(data = df) +
geom_jitter(mapping = aes(x = df['god'], y = df['science']))
g3 = ggplot(data = df) +
geom_jitter(mapping = aes(x = df['believe'], y = df['science']))
grid.arrange(g1, g2, g3) #plot all three variables against each other.
cor(scaleItems) #correlation matrix of all three items - looks great!
cronbach(scaleItems) # looks bad, because we haven't reverse scored the Science item yet.
scienceBeliefs_r = (6 - scienceBeliefs) #reverse score by subtracting from 6
scaleItems_r = cbind(godBeliefs, intuitionBeliefs, scienceBeliefs_r)
cor(scaleItems_r) #check matrix to see pos corr between all items
cronbach(scaleItems_r) # much better now!
# Aggregate all three scale items and attach to df
beliefsScale = ((godBeliefs + intuitionBeliefs + scienceBeliefs_r) / 3)
colnames(beliefsScale) <- 'beliefsScale' #rename column
colnames(scienceBeliefs_r) <- 'science_r' #rename column
df <- cbind(df, scienceBeliefs_r, beliefsScale)
#corrs between appropriateness rating and beliefs scale score separated by condition
cor(filter(df, condition == 'badge')$response, filter(df, condition == 'badge')$beliefsScale)
cor(filter(df, condition == 'poster')$response, filter(df, condition == 'poster')$beliefsScale)
cor(filter(df, condition == 'bp_short')$response, filter(df, condition == 'bp_short')$beliefsScale)
cor(filter(df, condition == 'bp_long')$response, filter(df, condition == 'bp_long')$beliefsScale)
#one more corr between beliefs scale score and appropriateness rating for both AB conditions together
cor(filter(df, condition == 'bp_short' | condition == 'bp_long')$response, +
filter(df, condition == 'bp_short' | condition == 'bp_long')$beliefsScale) #it's RIGHT ON THE EDGE.
## STEP 3 - DEMOGRAPHIC ANALYSES
## Visualize distributions of appropriateness for all four conditions BY demographic variables
# #SEX
# ggplot(data <- df) +
#   geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
#   facet_grid(sex_l ~condition)
#
# #RACE
# ggplot(data <- df) +
# geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
#   facet_grid(race_l ~ condition)
#
# #AGE
# ggplot(data <- df) +
#   geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
#   facet_grid(age_l ~ condition)
#
# #INCOME
# # ggplot(data <- df) +
# #   geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
# #   facet_grid(Income ~ condition)
#
# #SCIENCE
# ggplot(data <- df) +
#   geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
#   facet_grid(scale_l ~ condition)
#AB Illusion Pilot 1 (checklist) analysis plan
rm(list = ls()) #clear all from environment
setwd("/Users/gsholtzman/Dropbox/ABI Archive/abE1")
#packages installed
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
abE1 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive/abE1/abE1_raw.csv")
View(abE1)
abE8 <- abE8[-(1:2),]
abE1 <- abE1[-(1:2),]
View(abE1)
abE1 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive/abE1/abE1_raw.csv")
abE1 <- abE1[-(1:2),]
View(abE1)
rm(list = ls()) #clear all from environment
setwd("/Users/gsholtzman/Dropbox/ABI Archive/abE1")
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
rm(list = ls())
library(tidyverse)
abE1 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive/abE1/abE1_raw.csv")
#AB Illusion Pilot 1 (checklist) analysis plan
rm(list = ls()) #clear all from environment
setwd("/Users/gsholtzman/Dropbox/ABI Archive/abE1")
#packages installed
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
abE1 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive/abE1/abE1_raw.csv")
abE1 <- abE1[-(1:2),]
df = read_excel("AB_Pilot1_Master_Exclusions.xlsx", sheet = "CleanedData_Exclusions")
df$condition <- factor(df$condition, levels = c("badge", "poster", "bp_short", "bp_long")) #order conditions to be: A, B, AB_short, AB_long
##STEP 1 - CRITICAL ANALYSES
## Visualize distributions of appropriateness for all four conditions
## Visualize distributions of appropriateness for all four conditions
ggplot(data <- df) +
geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
facet_wrap(~ condition) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,.7)) +
ylab('Proportion') +
xlab('Appropriateness') +
ggtitle('Pilot Experiment')
## Get a bar graph of all four condition means (with standard error).
df_means <- summarySE(df, measurevar="response", groupvars="condition")
ggplot(df_means, aes(x=condition, y=response)) +
geom_bar(position=position_dodge(), stat="identity", fill = 'purple') +
geom_errorbar(aes(ymin=response-se, ymax=response+se), width = .2) +
ylab('Appropriateness') +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
ylim(c(0,5)) +
ggtitle('Pilot Experiment')
## Test for differences between A and B (POSTER MORE APPROPRIATE THAN BADGE)
aApprop = filter(df, condition == 'badge')$response #pull out responses for only badge
bApprop = filter(df, condition == 'poster')$response #pull out responses for only poster
# badgers = df[df$condition == 'badge', ] #alternative way to filter out only those in badge condition #learningR
(t.test(aApprop,bApprop, var.equal = TRUE)) #posters are more appropriate
## Test for differences between AB_long and AB_short (NO DIFFERENCE)
abLong_Approp = filter(df, condition == 'bp_long')$response #pull out responses for only badge
abShort_Approp = filter(df, condition == 'bp_short')$response #pull out responses for only poster
(t.test(abLong_Approp,abShort_Approp,var.equal = TRUE)) #no differences between conditions
## Test for differences between A and AB long/short; B and AB long/short
(t.test(aApprop,abLong_Approp,var.equal = TRUE)) #BADGE MORE APPROP THAN AB_LONG
(t.test(aApprop,abShort_Approp,var.equal = TRUE)) #BADGE MORE APPROP THAN AB_SHORT
(t.test(bApprop,abLong_Approp,var.equal = TRUE)) #POSTER MORE APPROP THAN AB_LONG
(t.test(bApprop,abShort_Approp,var.equal = TRUE)) #POSTER MORE APPROP THAN AB_SHORT
## Collapse AB_Short and AB_Long into abApprop (no difference between them)
abApprop = filter(df, condition == 'bp_short' | condition == 'bp_long')$response
## Test A against abApprop and B against abApprop for estimates of A/B Illusion effect size
(t.test(aApprop,abApprop,var.equal = TRUE)) #BADGE MORE APPROP THAN A/B
cohen.d(aApprop,abApprop) #Cohen's d = .937
(t.test(bApprop,abApprop,var.equal = TRUE)) #POSTER MORE APPROP THAN A/B
cohen.d(bApprop,abApprop) #Cohen's d = 1.32
##STEP 2 - PSYCHOLOGICAL VARIABLES
#Vectorize the three items to scatter against each other
godBeliefs = df['god'] #God has an impact
intuitionBeliefs = df['believe'] #Too much science, not enough intuition
scienceBeliefs = df['science'] #Knowledge comes from science
scaleItems = cbind(godBeliefs, intuitionBeliefs, scienceBeliefs)
g1 = ggplot(data = df) +
geom_jitter(mapping = aes(x = df['god'], y = df['believe']))
g2 = ggplot(data = df) +
geom_jitter(mapping = aes(x = df['god'], y = df['science']))
g3 = ggplot(data = df) +
geom_jitter(mapping = aes(x = df['believe'], y = df['science']))
grid.arrange(g1, g2, g3) #plot all three variables against each other.
cor(scaleItems) #correlation matrix of all three items - looks great!
cronbach(scaleItems) # looks bad, because we haven't reverse scored the Science item yet.
scienceBeliefs_r = (6 - scienceBeliefs) #reverse score by subtracting from 6
scaleItems_r = cbind(godBeliefs, intuitionBeliefs, scienceBeliefs_r)
cor(scaleItems_r) #check matrix to see pos corr between all items
cronbach(scaleItems_r) # much better now!
# Aggregate all three scale items and attach to df
beliefsScale = ((godBeliefs + intuitionBeliefs + scienceBeliefs_r) / 3)
colnames(beliefsScale) <- 'beliefsScale' #rename column
colnames(scienceBeliefs_r) <- 'science_r' #rename column
df <- cbind(df, scienceBeliefs_r, beliefsScale)
#corrs between appropriateness rating and beliefs scale score separated by condition
cor(filter(df, condition == 'badge')$response, filter(df, condition == 'badge')$beliefsScale)
cor(filter(df, condition == 'poster')$response, filter(df, condition == 'poster')$beliefsScale)
cor(filter(df, condition == 'bp_short')$response, filter(df, condition == 'bp_short')$beliefsScale)
cor(filter(df, condition == 'bp_long')$response, filter(df, condition == 'bp_long')$beliefsScale)
#one more corr between beliefs scale score and appropriateness rating for both AB conditions together
cor(filter(df, condition == 'bp_short' | condition == 'bp_long')$response, +
filter(df, condition == 'bp_short' | condition == 'bp_long')$beliefsScale) #it's RIGHT ON THE EDGE.
## STEP 3 - DEMOGRAPHIC ANALYSES
## Visualize distributions of appropriateness for all four conditions BY demographic variables
# #SEX
# ggplot(data <- df) +
#   geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
#   facet_grid(sex_l ~condition)
#
# #RACE
# ggplot(data <- df) +
# geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
#   facet_grid(race_l ~ condition)
#
# #AGE
# ggplot(data <- df) +
#   geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
#   facet_grid(age_l ~ condition)
#
# #INCOME
# # ggplot(data <- df) +
# #   geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
# #   facet_grid(Income ~ condition)
#
# #SCIENCE
# ggplot(data <- df) +
#   geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
#   facet_grid(scale_l ~ condition)
rm(list = ls())
setwd("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE2")
library(tidyverse)
abE2 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE2/abE2.csv")
#Create dichotomized responses
abE2 <- abE2 %>%
mutate(dv_binary = ifelse(dv < 3, 1, 0))
#Rearrange columns for easier viewing and coding.
abE2 <- abE2%>%select(pid, cond, condLabel, dv, dv_binary, FreeResponse, everything())
View(abE2)
rm(list = ls())
setwd("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE2")
library(tidyverse)
abE2 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE2/abE2.csv")
#Create dichotomized responses
abE2 <- abE2 %>%
mutate(dv_binary = ifelse(dv < 3, 1, 0))
#Rearrange columns for easier viewing and coding.
abE2 <- abE2%>%select(dv, dv_binary, FreeResponse, everything())
View(abE2)
rm(list = ls())
setwd("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE2")
library(tidyverse)
abE2 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE2/abE2.csv")
#Create dichotomized responses
abE2 <- abE2 %>%
mutate(dv_binary = ifelse(dv < 3, 1, 0))
#Rearrange columns for easier viewing and coding.
abE2 <- abE2%>%select(dv, dv_binary, reason, everything())
View(abE2)
rm(list = ls())
setwd("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE2")
library(tidyverse)
abE2 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE2/abE2.csv")
#Create dichotomized responses
abE2 <- abE2 %>%
mutate(dv_binary = ifelse(dv < 3, 1, 0))
#Rearrange columns for easier viewing and coding.
abE2 <- abE2%>%select(vgn, dv, dv_binary, reason, everything())
View(abE2)
#Save text file
write.csv(abE2, "abE2.csv", row.names=FALSE)
rm(list = ls())
setwd("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE1")
library(tidyverse)
abE1 <- read_csv("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE1/abE1.csv")
#Create dichotomized responses
abE1 <- abE1 %>%
mutate(dv_binary = ifelse(dv < 3, 1, 0))
#Rearrange columns for easier viewing and coding.
abE1 <- abE1%>%select(vgn, dv, dv_binary, reason, everything())
View(abE1)
write.csv(abE1, "abE1.csv", row.names=FALSE)
rm(list = ls())
setwd("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE1")
abE1 <- read.csv("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE1/abE1.csv")
library(tidyverse)
library(readxl)
library(effsize)
ggplot(data <- df) +
geom_bar(mapping = aes(x = response, y = ..prop.., group = 1), fill = 'red') +
facet_wrap(~ condition)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
setwd("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE1")
abE1 <- read.csv("/Users/gsholtzman/Dropbox/ABI Archive Cleaned/abE1/abE1.csv")
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
library(knitr)
library(kableExtra)
library(broom)
abE1[is.na(abE1)] <- 0
abE1$condLabel <- factor(abE1$condLabel, levels = c("badge", "poster", "bp_short", "bp_long"))
View(abE1)
abE1$condLabel <- factor(abE1$vgn, levels = c("badge", "poster", "bp_short", "bp_long"))
View(abE1)
BvP <- tidy((t.test(filter(abE1, condLabel == 'badge')$dv,filter(abE1, condLabel == 'poster')$dv, var.equal = TRUE)))
ABLvABS <- tidy((t.test(filter(abE1, condLabel == 'bp_short')$dv,filter(abE1, condLabel == 'bp_long')$dv, var.equal = TRUE)))
AvABS <- tidy((t.test(filter(abE1, condLabel == 'badge')$dv,filter(abE1, condLabel == 'bp_short')$dv, var.equal = TRUE)))
AvABL <- tidy((t.test(filter(abE1, condLabel == 'badge')$dv,filter(abE1, condLabel == 'bp_long')$dv, var.equal = TRUE)))
BvABS <- tidy((t.test(filter(abE1, condLabel == 'poster')$dv,filter(abE1, condLabel == 'bp_short')$dv, var.equal = TRUE)))
BvABL <- tidy((t.test(filter(abE1, condLabel == 'poster')$dv,filter(abE1, condLabel == 'bp_long')$dv, var.equal = TRUE)))
View(abE1)
View(BvP)
View(abE1)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
setwd("/Users/Geoff/Dropbox/ABI Archive Cleaned/abE1")
abE1 <- read.csv("/Users/Geoff/Dropbox/ABI Archive Cleaned/abE1/abE1.csv")
#Load packages
library(tidyverse) #for ggplot and filter
library(readxl) #for read
library(effsize) #for cohens d
library(gridExtra) #for multi plots
library(psy) #for alpha
library(scales) #for colors
library(Rmisc) #for summary stats
library(knitr)
library(kableExtra)
library(broom)
abE1[is.na(abE1)] <- 0
#Convert cond into factor variable and reorder conditions
abE1$condLabel <- factor(abE1$vgn, levels = c("badge", "poster", "xbps", "xbpl"))
abE1 <- abE1 %>%
mutate(dv_binary = ifelse(dv < 3, 1, 0))
ggplot(abE1, aes(x=condLabel, y=dv_binary)) +
geom_bar(stat="identity", fill = 'grey38', color = 'grey38', width = .65) +
ylab('% rating inappropriate') +
xlab('Condition') +
theme(axis.text.x = element_text(angle = 320, hjust = 0))
ggplot(abE1, aes(x=condLabel, y=dv_binary)) +
geom_bar(stat="identity", fill = 'grey38', color = 'grey38', width = .65) +
ylab('% rating inappropriate') +
xlab('Condition') +
labs(y = "Percent", fill="condLabel")
theme(axis.text.x = element_text(angle = 320, hjust = 0))
